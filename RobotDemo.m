%%
% *7a. Replicate Cyton Gamma 1500*

robai = SerialLink([ ...
    Revolute('a', 0, 'd', 177, 'qlim', [deg2rad(-150) deg2rad(150)], 'alpha', -pi/2), ...
    Revolute('a', 126, 'd', 0, 'qlim', [deg2rad(-105) deg2rad(105)], 'alpha', pi/2, 'offset', -pi/2), ...
    Revolute('a', 115, 'd', 0, 'qlim', [deg2rad(-105) deg2rad(105)], 'alpha', -pi/2), ...
    Revolute('a', 97,  'd', 0, 'qlim', [deg2rad(-105) deg2rad(105)], 'alpha', pi/2), ...
    Revolute('a', 72,  'd', 0, 'qlim', [deg2rad(-105) deg2rad(105)], 'alpha', -pi/2), ...
    Revolute('a', 0, 'd', 0, 'qlim', [deg2rad(-105) deg2rad(105)], 'alpha', pi/2, 'offset', pi/2), ...
    Revolute('a', 0, 'd', 150, 'qlim', [deg2rad(-150) deg2rad(150)], 'alpha', pi/2, 'offset', pi/2), ...
    Prismatic('theta', -pi/2, 'qlim', [0 25])], ...
    'name', 'robai');

robai.tool = transl(0, 0, 20) * troty(-pi/2);
robai.base = SE3(0, 0, 74);
robai

%%
% *7b. Joint angles to reach table*

% By hand
joint_angles = [0 deg2rad(-80) 0 deg2rad(-79.9675) 0 0 0 0];

robai.plot(limit_joints(robai, joint_angles), ...
    'workspace', [-500 500 -500 500 0 800], ...
    'floorlevel', 0, ...
    'jointdiam', 1.5)

% Gets to the table at z ~= 0
robai.fkine(joint_angles)


%%
% *Fix joint limits*

function angles = limit_joints(robot, angles)
    for i = 1:robot.n
        angles(i) = min( ...
            robot.links(i).qlim(2), ...
            max(robot.links(i).qlim(1), angles(i)));
    end
end